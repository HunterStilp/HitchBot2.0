
HitchBot2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00001a6e  00001ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000357f  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eb4  00000000  00000000  0000544b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001712  00000000  00000000  000062ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007e4  00000000  00000000  00007a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c6  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ee5  00000000  00000000  00008bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  0000baa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__ctors_end>
       4:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
       8:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
       c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      10:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      14:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      18:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      1c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      20:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      24:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      2c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      30:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      34:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      38:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      3c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      40:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      44:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      48:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      4c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      50:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      54:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      58:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      5c:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      60:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>
      64:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__bad_interrupt>

00000068 <Font16_Table>:
	...
      88:	00 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
      98:	0c 00 00 00 0c 00 00 00 00 00 00 00 00 00 00 00     ................
      a8:	00 00 00 00 1d c0 1d c0 08 80 08 80 08 80 00 00     ................
	...
      c8:	00 00 0d 80 0d 80 0d 80 0d 80 3f c0 1b 00 3f c0     ..........?...?.
      d8:	1b 00 1b 00 1b 00 1b 00 00 00 00 00 00 00 00 00     ................
      e8:	04 00 1f 80 31 80 31 80 38 00 1e 00 0f 00 03 80     ....1.1.8.......
      f8:	31 80 31 80 3f 00 04 00 04 00 00 00 00 00 00 00     1.1.?...........
     108:	00 00 18 00 24 00 24 00 18 c0 07 80 1e 00 31 80     ....$.$.......1.
     118:	02 40 02 40 01 80 00 00 00 00 00 00 00 00 00 00     .@.@............
     128:	00 00 00 00 0f 00 18 00 18 00 18 00 0c 00 1d 80     ................
     138:	37 00 33 00 1d 80 00 00 00 00 00 00 00 00 00 00     7.3.............
     148:	00 00 00 00 07 00 07 00 02 00 02 00 02 00 00 00     ................
	...
     168:	00 00 03 00 03 00 06 00 0e 00 0c 00 0c 00 0c 00     ................
     178:	0c 00 0e 00 06 00 03 00 03 00 00 00 00 00 00 00     ................
     188:	00 00 18 00 18 00 0c 00 06 00 06 00 06 00 06 00     ................
     198:	06 00 06 00 0c 00 1c 00 18 00 00 00 00 00 00 00     ................
     1a8:	00 00 06 00 06 00 3f c0 3f c0 0f 00 1f 80 19 80     ......?.?.......
	...
     1cc:	00 00 04 00 04 00 04 00 3f 80 04 00 04 00 04 00     ........?.......
	...
     1f8:	00 00 06 00 04 00 0c 00 08 00 08 00 00 00 00 00     ................
	...
     214:	3f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
	...
     238:	00 00 0c 00 0c 00 00 00 00 00 00 00 00 00 00 00     ................
     248:	00 c0 00 c0 01 80 01 80 03 00 03 00 06 00 0c 00     ................
     258:	0c 00 18 00 18 00 30 00 30 00 00 00 00 00 00 00     ......0.0.......
     268:	00 00 0e 00 1b 00 31 80 31 80 31 80 31 80 31 80     ......1.1.1.1.1.
     278:	31 80 1b 00 0e 00 00 00 00 00 00 00 00 00 00 00     1...............
     288:	00 00 06 00 3e 00 06 00 06 00 06 00 06 00 06 00     ....>...........
     298:	06 00 06 00 3f c0 00 00 00 00 00 00 00 00 00 00     ....?...........
     2a8:	00 00 0f 00 19 80 31 80 31 80 03 00 06 00 0c 00     ......1.1.......
     2b8:	18 00 30 00 3f 80 00 00 00 00 00 00 00 00 00 00     ..0.?...........
     2c8:	00 00 3f 00 61 80 01 80 03 00 1f 00 03 80 01 80     ..?.a...........
     2d8:	01 80 61 80 3f 00 00 00 00 00 00 00 00 00 00 00     ..a.?...........
     2e8:	00 00 07 00 07 00 0f 00 0b 00 1b 00 13 00 33 00     ..............3.
     2f8:	3f 80 03 00 0f 80 00 00 00 00 00 00 00 00 00 00     ?...............
     308:	00 00 1f 80 18 00 18 00 18 00 1f 00 11 80 01 80     ................
     318:	01 80 21 80 1f 00 00 00 00 00 00 00 00 00 00 00     ..!.............
     328:	00 00 07 80 1c 00 18 00 30 00 37 00 39 80 31 80     ........0.7.9.1.
     338:	31 80 19 80 0f 00 00 00 00 00 00 00 00 00 00 00     1...............
     348:	00 00 7f 00 43 00 03 00 06 00 06 00 06 00 06 00     ....C...........
     358:	0c 00 0c 00 0c 00 00 00 00 00 00 00 00 00 00 00     ................
     368:	00 00 1f 00 31 80 31 80 31 80 1f 00 31 80 31 80     ....1.1.1...1.1.
     378:	31 80 31 80 1f 00 00 00 00 00 00 00 00 00 00 00     1.1.............
     388:	00 00 1e 00 33 00 31 80 31 80 33 80 1d 80 01 80     ....3.1.1.3.....
     398:	03 00 07 00 3c 00 00 00 00 00 00 00 00 00 00 00     ....<...........
	...
     3b0:	0c 00 0c 00 00 00 00 00 00 00 0c 00 0c 00 00 00     ................
	...
     3d0:	03 00 03 00 00 00 00 00 00 00 06 00 04 00 08 00     ................
     3e0:	08 00 00 00 00 00 00 00 00 00 00 00 00 c0 03 00     ................
     3f0:	04 00 18 00 60 00 18 00 04 00 03 00 00 c0 00 00     ....`...........
	...
     410:	00 00 7f c0 00 00 7f c0 00 00 00 00 00 00 00 00     ................
	...
     42c:	60 00 18 00 04 00 03 00 00 c0 03 00 04 00 18 00     `...............
     43c:	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
     44c:	1f 00 31 80 31 80 01 80 07 00 0c 00 0c 00 00 00     ..1.1...........
     45c:	0c 00 00 00 00 00 00 00 00 00 00 00 00 00 0e 00     ................
     46c:	11 00 21 00 21 00 27 00 29 00 29 00 27 00 20 00     ..!.!.'.).).'. .
     47c:	11 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     48c:	3f 00 0f 00 09 00 19 80 19 80 1f 80 30 c0 30 c0     ?...........0.0.
     49c:	79 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     y...............
     4ac:	7f 00 31 80 31 80 31 80 3f 00 31 80 31 80 31 80     ..1.1.1.?.1.1.1.
     4bc:	7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4cc:	1f 40 30 c0 60 40 60 00 60 00 60 00 60 40 30 80     .@0.`@`.`.`.`@0.
     4dc:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4ec:	7f 00 31 80 30 c0 30 c0 30 c0 30 c0 30 c0 31 80     ..1.0.0.0.0.0.1.
     4fc:	7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     50c:	7f 80 30 80 30 80 32 00 3e 00 32 00 30 80 30 80     ..0.0.2.>.2.0.0.
     51c:	7f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     52c:	7f c0 30 40 30 40 32 00 3e 00 32 00 30 00 30 00     ..0@0@2.>.2.0.0.
     53c:	7c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     |...............
     54c:	1e 80 31 80 60 80 60 00 60 00 67 c0 61 80 31 80     ..1.`.`.`.g.a.1.
     55c:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     56c:	7b c0 31 80 31 80 31 80 3f 80 31 80 31 80 31 80     {.1.1.1.?.1.1.1.
     57c:	7b c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     {...............
     58c:	3f c0 06 00 06 00 06 00 06 00 06 00 06 00 06 00     ?...............
     59c:	3f c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     5ac:	1f c0 03 00 03 00 03 00 03 00 63 00 63 00 63 00     ..........c.c.c.
     5bc:	3e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     >...............
     5cc:	7b c0 31 80 33 00 36 00 3c 00 3e 00 33 00 31 80     {.1.3.6.<.>.3.1.
     5dc:	79 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     y...............
     5ec:	7e 00 18 00 18 00 18 00 18 00 18 40 18 40 18 40     ~..........@.@.@
     5fc:	7f c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	e0 e0 60 c0 71 c0 7b c0 6a c0 6e c0 64 c0 60 c0     ..`.q.{.j.n.d.`.
     61c:	fb e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     62c:	73 c0 31 80 39 80 3d 80 35 80 37 80 33 80 31 80     s.1.9.=.5.7.3.1.
     63c:	79 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     y...............
     64c:	1f 00 31 80 60 c0 60 c0 60 c0 60 c0 60 c0 31 80     ..1.`.`.`.`.`.1.
     65c:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     66c:	7f 00 31 80 31 80 31 80 31 80 3f 00 30 00 30 00     ..1.1.1.1.?.0.0.
     67c:	7e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ~...............
     68c:	1f 00 31 80 60 c0 60 c0 60 c0 60 c0 60 c0 31 80     ..1.`.`.`.`.`.1.
     69c:	1f 00 0c c0 1f 80 00 00 00 00 00 00 00 00 00 00     ................
     6ac:	7f 00 31 80 31 80 31 80 3e 00 33 00 31 80 31 80     ..1.1.1.>.3.1.1.
     6bc:	7c e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     |...............
     6cc:	1f 80 31 80 31 80 38 00 1f 00 03 80 31 80 31 80     ..1.1.8.....1.1.
     6dc:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     6ec:	7f 80 4c 80 4c 80 4c 80 0c 00 0c 00 0c 00 0c 00     ..L.L.L.........
     6fc:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     70c:	7b c0 31 80 31 80 31 80 31 80 31 80 31 80 31 80     {.1.1.1.1.1.1.1.
     71c:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     72c:	7b c0 31 80 31 80 1b 00 1b 00 1b 00 0a 00 0e 00     {.1.1...........
     73c:	0e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     74c:	fb e0 60 c0 64 c0 6e c0 6e c0 2a 80 3b 80 3b 80     ..`.d.n.n.*.;.;.
     75c:	31 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     1...............
     76c:	7b c0 31 80 1b 00 0e 00 0e 00 0e 00 1b 00 31 80     {.1...........1.
     77c:	7b c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     {...............
     78c:	79 e0 30 c0 19 80 0f 00 06 00 06 00 06 00 06 00     y.0.............
     79c:	1f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7ac:	3f 80 21 80 23 00 06 00 04 00 0c 00 18 80 30 80     ?.!.#.........0.
     7bc:	3f 80 00 00 00 00 00 00 00 00 00 00 00 00 07 80     ?...............
     7cc:	06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
     7dc:	06 00 06 00 07 80 00 00 00 00 00 00 30 00 30 00     ............0.0.
     7ec:	18 00 18 00 0c 00 0c 00 06 00 03 00 03 00 01 80     ................
     7fc:	01 80 00 c0 00 c0 00 00 00 00 00 00 00 00 1e 00     ................
     80c:	06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
     81c:	06 00 06 00 1e 00 00 00 00 00 00 00 04 00 0a 00     ................
     82c:	0a 00 11 00 20 80 20 80 00 00 00 00 00 00 00 00     .... . .........
	...
     864:	00 00 ff e0 08 00 04 00 02 00 00 00 00 00 00 00     ................
	...
     890:	1f 00 01 80 01 80 1f 80 31 80 33 80 1d c0 00 00     ........1.3.....
	...
     8a8:	00 00 70 00 30 00 30 00 37 00 39 80 30 c0 30 c0     ..p.0.0.7.9.0.0.
     8b8:	30 c0 39 80 77 00 00 00 00 00 00 00 00 00 00 00     0.9.w...........
	...
     8d0:	1e 80 31 80 60 80 60 00 60 80 31 80 1f 00 00 00     ..1.`.`.`.1.....
	...
     8e8:	00 00 03 80 01 80 01 80 1d 80 33 80 61 80 61 80     ..........3.a.a.
     8f8:	61 80 33 80 1d c0 00 00 00 00 00 00 00 00 00 00     a.3.............
	...
     910:	1f 00 31 80 60 c0 7f c0 60 00 30 c0 1f 80 00 00     ..1.`...`.0.....
	...
     928:	00 00 07 e0 0c 00 0c 00 3f 80 0c 00 0c 00 0c 00     ........?.......
     938:	0c 00 0c 00 3f 80 00 00 00 00 00 00 00 00 00 00     ....?...........
	...
     950:	1d c0 33 80 61 80 61 80 61 80 33 80 1d 80 01 80     ..3.a.a.a.3.....
     960:	01 80 1f 00 00 00 00 00 00 00 70 00 30 00 30 00     ..........p.0.0.
     970:	37 00 39 80 31 80 31 80 31 80 31 80 7b c0 00 00     7.9.1.1.1.1.{...
	...
     988:	00 00 06 00 06 00 00 00 1e 00 06 00 06 00 06 00     ................
     998:	06 00 06 00 3f c0 00 00 00 00 00 00 00 00 00 00     ....?...........
     9a8:	00 00 06 00 06 00 00 00 3f 00 03 00 03 00 03 00     ........?.......
     9b8:	03 00 03 00 03 00 03 00 03 00 3e 00 00 00 00 00     ..........>.....
     9c8:	00 00 70 00 30 00 30 00 37 80 36 00 3c 00 3c 00     ..p.0.0.7.6.<.<.
     9d8:	36 00 33 00 77 c0 00 00 00 00 00 00 00 00 00 00     6.3.w...........
     9e8:	00 00 1e 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
     9f8:	06 00 06 00 3f c0 00 00 00 00 00 00 00 00 00 00     ....?...........
	...
     a10:	7f 80 36 c0 36 c0 36 c0 36 c0 36 c0 76 e0 00 00     ..6.6.6.6.6.v...
	...
     a30:	77 00 39 80 31 80 31 80 31 80 31 80 7b c0 00 00     w.9.1.1.1.1.{...
	...
     a50:	1f 00 31 80 60 c0 60 c0 60 c0 31 80 1f 00 00 00     ..1.`.`.`.1.....
	...
     a70:	77 00 39 80 30 c0 30 c0 30 c0 39 80 37 00 30 00     w.9.0.0.0.9.7.0.
     a80:	30 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00     0.|.............
     a90:	1d c0 33 80 61 80 61 80 61 80 33 80 1d 80 01 80     ..3.a.a.a.3.....
     aa0:	01 80 07 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ab0:	7b 80 1c c0 18 00 18 00 18 00 18 00 7f 00 00 00     {...............
	...
     ad0:	1f 80 31 80 3c 00 1f 00 03 80 31 80 3f 00 00 00     ..1.<.....1.?...
	...
     ae8:	00 00 18 00 18 00 18 00 7f 00 18 00 18 00 18 00     ................
     af8:	18 00 18 80 0f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     b10:	73 80 31 80 31 80 31 80 31 80 33 80 1d c0 00 00     s.1.1.1.1.3.....
	...
     b30:	7b c0 31 80 31 80 1b 00 1b 00 0e 00 0e 00 00 00     {.1.1...........
	...
     b50:	f1 e0 60 c0 64 c0 6e c0 3b 80 3b 80 31 80 00 00     ..`.d.n.;.;.1...
	...
     b70:	7b c0 1b 00 0e 00 0e 00 0e 00 1b 00 7b c0 00 00     {...........{...
	...
     b90:	79 e0 30 c0 19 80 19 80 0b 00 0f 00 06 00 06 00     y.0.............
     ba0:	0c 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     ..>.............
     bb0:	3f 80 21 80 03 00 0e 00 18 00 30 80 3f 80 00 00     ?.!.......0.?...
	...
     bc8:	00 00 06 00 0c 00 0c 00 0c 00 0c 00 0c 00 18 00     ................
     bd8:	0c 00 0c 00 0c 00 0c 00 06 00 00 00 00 00 00 00     ................
     be8:	00 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
     bf8:	06 00 06 00 06 00 06 00 06 00 00 00 00 00 00 00     ................
     c08:	00 00 0c 00 06 00 06 00 06 00 06 00 06 00 03 00     ................
     c18:	06 00 06 00 06 00 06 00 0c 00 00 00 00 00 00 00     ................
	...
     c30:	00 00 18 00 24 80 03 00 00 00 00 00 00 00 00 00     ....$...........
	...

00000c48 <__ctors_end>:
     c48:	11 24       	eor	r1, r1
     c4a:	1f be       	out	0x3f, r1	; 63
     c4c:	cf ef       	ldi	r28, 0xFF	; 255
     c4e:	d8 e0       	ldi	r29, 0x08	; 8
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	cd bf       	out	0x3d, r28	; 61

00000c54 <__do_copy_data>:
     c54:	12 e0       	ldi	r17, 0x02	; 2
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	b1 e0       	ldi	r27, 0x01	; 1
     c5a:	ee e6       	ldi	r30, 0x6E	; 110
     c5c:	fa e1       	ldi	r31, 0x1A	; 26
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <__do_copy_data+0x10>
     c60:	05 90       	lpm	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	a0 38       	cpi	r26, 0x80	; 128
     c66:	b1 07       	cpc	r27, r17
     c68:	d9 f7       	brne	.-10     	; 0xc60 <__do_copy_data+0xc>

00000c6a <__do_clear_bss>:
     c6a:	22 e0       	ldi	r18, 0x02	; 2
     c6c:	a0 e8       	ldi	r26, 0x80	; 128
     c6e:	b2 e0       	ldi	r27, 0x02	; 2
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <.do_clear_bss_start>

00000c72 <.do_clear_bss_loop>:
     c72:	1d 92       	st	X+, r1

00000c74 <.do_clear_bss_start>:
     c74:	a0 38       	cpi	r26, 0x80	; 128
     c76:	b2 07       	cpc	r27, r18
     c78:	e1 f7       	brne	.-8      	; 0xc72 <.do_clear_bss_loop>
     c7a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <main>
     c7e:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <_exit>

00000c82 <__bad_interrupt>:
     c82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c86 <epd_send_command>:
	}
	
	epd_load_lut(0);
	epd_send_command(0x20);
	epd_wait_until_idle();
}
     c86:	cf 93       	push	r28
     c88:	c8 2f       	mov	r28, r24
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
     c92:	8c 2f       	mov	r24, r28
     c94:	0e 94 6d 08 	call	0x10da	; 0x10da <epd_spi_transfer>
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <epd_send_data>:
     c9c:	cf 93       	push	r28
     c9e:	c8 2f       	mov	r28, r24
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
     ca8:	8c 2f       	mov	r24, r28
     caa:	0e 94 6d 08 	call	0x10da	; 0x10da <epd_spi_transfer>
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <epd_wait_until_idle>:
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <epd_digital_read>
     cb8:	81 11       	cpse	r24, r1
     cba:	fb cf       	rjmp	.-10     	; 0xcb2 <epd_wait_until_idle>
     cbc:	87 e8       	ldi	r24, 0x87	; 135
     cbe:	93 e1       	ldi	r25, 0x13	; 19
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <epd_wait_until_idle+0xe>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <epd_wait_until_idle+0x14>
     cc6:	00 00       	nop
     cc8:	08 95       	ret

00000cca <epd_reset>:
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
     cd2:	87 e8       	ldi	r24, 0x87	; 135
     cd4:	93 e1       	ldi	r25, 0x13	; 19
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <epd_reset+0xc>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <epd_reset+0x12>
     cdc:	00 00       	nop
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
     ce6:	83 ef       	ldi	r24, 0xF3	; 243
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <epd_reset+0x20>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <epd_reset+0x26>
     cf0:	00 00       	nop
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
     cfa:	87 e8       	ldi	r24, 0x87	; 135
     cfc:	93 e1       	ldi	r25, 0x13	; 19
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <epd_reset+0x34>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <epd_reset+0x3a>
     d04:	00 00       	nop
     d06:	08 95       	ret

00000d08 <epd_init>:
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <epd_if_init>
     d10:	ec 01       	movw	r28, r24
     d12:	89 2b       	or	r24, r25
     d14:	09 f0       	breq	.+2      	; 0xd18 <epd_init+0x10>
     d16:	ac c0       	rjmp	.+344    	; 0xe70 <epd_init+0x168>
     d18:	0e 94 65 06 	call	0xcca	; 0xcca <epd_reset>
     d1c:	82 e1       	ldi	r24, 0x12	; 18
     d1e:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d22:	2f e5       	ldi	r18, 0x5F	; 95
     d24:	8a ee       	ldi	r24, 0xEA	; 234
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	80 40       	sbci	r24, 0x00	; 0
     d2c:	90 40       	sbci	r25, 0x00	; 0
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <epd_init+0x20>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <epd_init+0x2a>
     d32:	00 00       	nop
     d34:	86 e4       	ldi	r24, 0x46	; 70
     d36:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d3a:	87 ef       	ldi	r24, 0xF7	; 247
     d3c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d40:	0e 94 59 06 	call	0xcb2	; 0xcb2 <epd_wait_until_idle>
     d44:	87 e4       	ldi	r24, 0x47	; 71
     d46:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d4a:	87 ef       	ldi	r24, 0xF7	; 247
     d4c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d50:	0e 94 59 06 	call	0xcb2	; 0xcb2 <epd_wait_until_idle>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d5a:	8f ed       	ldi	r24, 0xDF	; 223
     d5c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d7e:	81 e4       	ldi	r24, 0x41	; 65
     d80:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d84:	88 ea       	ldi	r24, 0xA8	; 168
     d86:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d8a:	82 e3       	ldi	r24, 0x32	; 50
     d8c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d90:	81 e1       	ldi	r24, 0x11	; 17
     d92:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     d9c:	8c e3       	ldi	r24, 0x3C	; 60
     d9e:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     da8:	8c e0       	ldi	r24, 0x0C	; 12
     daa:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     dae:	8e ea       	ldi	r24, 0xAE	; 174
     db0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     db4:	87 ec       	ldi	r24, 0xC7	; 199
     db6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dba:	83 ec       	ldi	r24, 0xC3	; 195
     dbc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dc0:	80 ec       	ldi	r24, 0xC0	; 192
     dc2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dc6:	80 ec       	ldi	r24, 0xC0	; 192
     dc8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dcc:	88 e1       	ldi	r24, 0x18	; 24
     dce:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     dd2:	80 e8       	ldi	r24, 0x80	; 128
     dd4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dd8:	8c e2       	ldi	r24, 0x2C	; 44
     dda:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     dde:	84 e4       	ldi	r24, 0x44	; 68
     de0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     de4:	87 e3       	ldi	r24, 0x37	; 55
     de6:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e08:	8f e4       	ldi	r24, 0x4F	; 79
     e0a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e26:	84 e4       	ldi	r24, 0x44	; 68
     e28:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e38:	87 e1       	ldi	r24, 0x17	; 23
     e3a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e44:	85 e4       	ldi	r24, 0x45	; 69
     e46:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e56:	8f ed       	ldi	r24, 0xDF	; 223
     e58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e62:	82 e2       	ldi	r24, 0x22	; 34
     e64:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     e68:	8f ec       	ldi	r24, 0xCF	; 207
     e6a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <epd_init+0x16c>
     e70:	cf ef       	ldi	r28, 0xFF	; 255
     e72:	df ef       	ldi	r29, 0xFF	; 255
     e74:	ce 01       	movw	r24, r28
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <epd_turn_on_display>:
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     e82:	0e 94 59 06 	call	0xcb2	; 0xcb2 <epd_wait_until_idle>
     e86:	08 95       	ret

00000e88 <epd_sleep>:
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     e94:	08 95       	ret

00000e96 <epd_load_lut>:
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	18 2f       	mov	r17, r24
     e9e:	82 e3       	ldi	r24, 0x32	; 50
     ea0:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
     ea8:	12 c0       	rjmp	.+36     	; 0xece <epd_load_lut+0x38>
     eaa:	11 30       	cpi	r17, 0x01	; 1
     eac:	39 f4       	brne	.+14     	; 0xebc <epd_load_lut+0x26>
     eae:	fe 01       	movw	r30, r28
     eb0:	e1 59       	subi	r30, 0x91	; 145
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	80 81       	ld	r24, Z
     eb6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     eba:	08 c0       	rjmp	.+16     	; 0xecc <epd_load_lut+0x36>
     ebc:	11 11       	cpse	r17, r1
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <epd_load_lut+0x36>
     ec0:	fe 01       	movw	r30, r28
     ec2:	ea 5f       	subi	r30, 0xFA	; 250
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	80 81       	ld	r24, Z
     ec8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
     ecc:	21 96       	adiw	r28, 0x01	; 1
     ece:	c9 36       	cpi	r28, 0x69	; 105
     ed0:	d1 05       	cpc	r29, r1
     ed2:	58 f3       	brcs	.-42     	; 0xeaa <epd_load_lut+0x14>
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	08 95       	ret

00000edc <epd_display_frame_part>:

void epd_display_frame_part(const UBYTE *Image, UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, bool isGC) {
     edc:	6f 92       	push	r6
     ede:	7f 92       	push	r7
     ee0:	8f 92       	push	r8
     ee2:	9f 92       	push	r9
     ee4:	af 92       	push	r10
     ee6:	bf 92       	push	r11
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	6c 01       	movw	r12, r24
     ef8:	4b 01       	movw	r8, r22
     efa:	5a 01       	movw	r10, r20
	UWORD i, Width;
	Width = (Xend-Xstart)%8 == 0 ? (Xend-Xstart)/8 : (Xend-Xstart)/8+1;
     efc:	c9 01       	movw	r24, r18
     efe:	86 1b       	sub	r24, r22
     f00:	97 0b       	sbc	r25, r23
     f02:	ac 01       	movw	r20, r24
     f04:	47 70       	andi	r20, 0x07	; 7
     f06:	55 27       	eor	r21, r21
     f08:	45 2b       	or	r20, r21
     f0a:	39 f4       	brne	.+14     	; 0xf1a <epd_display_frame_part+0x3e>
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <epd_display_frame_part+0x4c>
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	01 96       	adiw	r24, 0x01	; 1
	UWORD IMAGE_COUNTER = Width * (Yend-Ystart);
     f28:	a8 01       	movw	r20, r16
     f2a:	4a 19       	sub	r20, r10
     f2c:	5b 09       	sbc	r21, r11
     f2e:	84 9f       	mul	r24, r20
     f30:	e0 01       	movw	r28, r0
     f32:	85 9f       	mul	r24, r21
     f34:	d0 0d       	add	r29, r0
     f36:	94 9f       	mul	r25, r20
     f38:	d0 0d       	add	r29, r0
     f3a:	11 24       	eor	r1, r1

	Xend -= 1;
     f3c:	39 01       	movw	r6, r18
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	68 1a       	sub	r6, r24
     f42:	71 08       	sbc	r7, r1
	Yend -= 1;
     f44:	01 50       	subi	r16, 0x01	; 1
     f46:	11 09       	sbc	r17, r1

	epd_send_command(0x44);
     f48:	84 e4       	ldi	r24, 0x44	; 68
     f4a:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(Xstart & 0xff);
     f4e:	88 2d       	mov	r24, r8
     f50:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Xstart>>8) & 0x03);
     f54:	89 2d       	mov	r24, r9
     f56:	83 70       	andi	r24, 0x03	; 3
     f58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data(Xend & 0xff);
     f5c:	86 2d       	mov	r24, r6
     f5e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Xend>>8) & 0x03);
     f62:	87 2d       	mov	r24, r7
     f64:	83 70       	andi	r24, 0x03	; 3
     f66:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_command(0x45);
     f6a:	85 e4       	ldi	r24, 0x45	; 69
     f6c:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(Ystart & 0xff);
     f70:	8a 2d       	mov	r24, r10
     f72:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Ystart>>8) & 0x03);
     f76:	8b 2d       	mov	r24, r11
     f78:	83 70       	andi	r24, 0x03	; 3
     f7a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data(Yend & 0xff);
     f7e:	80 2f       	mov	r24, r16
     f80:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Yend>>8) & 0x03);
     f84:	81 2f       	mov	r24, r17
     f86:	83 70       	andi	r24, 0x03	; 3
     f88:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>

	epd_send_command(0x4E); // SET_RAM_X_ADDRESS_COUNTER
     f8c:	8e e4       	ldi	r24, 0x4E	; 78
     f8e:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(Xstart & 0xFF);
     f92:	88 2d       	mov	r24, r8
     f94:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>

	epd_send_command(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
     f98:	8f e4       	ldi	r24, 0x4F	; 79
     f9a:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(Ystart & 0xFF);
     f9e:	8a 2d       	mov	r24, r10
     fa0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Ystart >> 8) & 0xFF);
     fa4:	8b 2d       	mov	r24, r11
     fa6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	
	epd_send_command(0x24);
     faa:	84 e2       	ldi	r24, 0x24	; 36
     fac:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	
	
	for (i = 0; i < IMAGE_COUNTER; i++)
     fb0:	00 e0       	ldi	r16, 0x00	; 0
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <epd_display_frame_part+0xea>
	{
		epd_send_data(Image[i]);
     fb6:	f6 01       	movw	r30, r12
     fb8:	e0 0f       	add	r30, r16
     fba:	f1 1f       	adc	r31, r17
     fbc:	80 81       	ld	r24, Z
     fbe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data((Ystart >> 8) & 0xFF);
	
	epd_send_command(0x24);
	
	
	for (i = 0; i < IMAGE_COUNTER; i++)
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	0c 17       	cp	r16, r28
     fc8:	1d 07       	cpc	r17, r29
     fca:	a8 f3       	brcs	.-22     	; 0xfb6 <epd_display_frame_part+0xda>
	{
		epd_send_data(Image[i]);
	}
	if(isGC)
     fcc:	ee 20       	and	r14, r14
     fce:	21 f0       	breq	.+8      	; 0xfd8 <epd_display_frame_part+0xfc>
		epd_load_lut(1);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 4b 07 	call	0xe96	; 0xe96 <epd_load_lut>
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <epd_display_frame_part+0x102>
	else
		epd_load_lut(0);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 4b 07 	call	0xe96	; 0xe96 <epd_load_lut>
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	bf 90       	pop	r11
     fee:	af 90       	pop	r10
     ff0:	9f 90       	pop	r9
     ff2:	8f 90       	pop	r8
     ff4:	7f 90       	pop	r7
     ff6:	6f 90       	pop	r6
     ff8:	08 95       	ret

00000ffa <epd_clear>:
void epd_sleep(void) {
    epd_send_command(0X10);   //deep sleep
    epd_send_data(0x03);
}

void epd_clear(UBYTE mode) {
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	18 2f       	mov	r17, r24
	UWORD i;
	unsigned long IMAGE_COUNTER = EPD_WIDTH / 8 * EPD_HEIGHT;

	epd_send_command(0x4E);
    1002:	8e e4       	ldi	r24, 0x4E	; 78
    1004:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(0x00);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data(0x00);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_command(0x4F);
    1014:	8f e4       	ldi	r24, 0x4F	; 79
    1016:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_send_data(0x00);
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_data(0x00);
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>

	epd_send_command(0x24);
    1026:	84 e2       	ldi	r24, 0x24	; 36
    1028:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	for (i = 0; i < IMAGE_COUNTER; i++)
    102c:	c0 e0       	ldi	r28, 0x00	; 0
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <epd_clear+0x40>
	{
		epd_send_data(0xff);
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	0e 94 4e 06 	call	0xc9c	; 0xc9c <epd_send_data>
	epd_send_command(0x4F);
	epd_send_data(0x00);
	epd_send_data(0x00);

	epd_send_command(0x24);
	for (i = 0; i < IMAGE_COUNTER; i++)
    1038:	21 96       	adiw	r28, 0x01	; 1
    103a:	c0 3a       	cpi	r28, 0xA0	; 160
    103c:	81 e4       	ldi	r24, 0x41	; 65
    103e:	d8 07       	cpc	r29, r24
    1040:	c0 f3       	brcs	.-16     	; 0x1032 <epd_clear+0x38>
	{
		epd_send_data(0xff);
	}
	if(mode)
    1042:	11 23       	and	r17, r17
    1044:	21 f0       	breq	.+8      	; 0x104e <epd_clear+0x54>
		epd_load_lut(1);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 4b 07 	call	0xe96	; 0xe96 <epd_load_lut>
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <epd_clear+0x5a>
	else
		epd_load_lut(0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 4b 07 	call	0xe96	; 0xe96 <epd_load_lut>
	epd_send_command(0x20);
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	0e 94 43 06 	call	0xc86	; 0xc86 <epd_send_command>
	epd_wait_until_idle();
    105a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <epd_wait_until_idle>
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	08 95       	ret

00001066 <spi_init>:
// @param delaytime: the number of milliseconds to pause
void epd_delay_ms(unsigned int delaytime) {
    while (delaytime--) {
        _delay_ms(1);
    }
}
    1066:	84 b1       	in	r24, 0x04	; 4
    1068:	87 60       	ori	r24, 0x07	; 7
    106a:	84 b9       	out	0x04, r24	; 4
    106c:	8a b1       	in	r24, 0x0a	; 10
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	8a b9       	out	0x0a, r24	; 10
    1072:	84 b1       	in	r24, 0x04	; 4
    1074:	8c 62       	ori	r24, 0x2C	; 44
    1076:	84 b9       	out	0x04, r24	; 4
    1078:	81 e5       	ldi	r24, 0x51	; 81
    107a:	8c bd       	out	0x2c, r24	; 44
    107c:	08 95       	ret

0000107e <spi_transfer>:
    107e:	8e bd       	out	0x2e, r24	; 46
    1080:	0d b4       	in	r0, 0x2d	; 45
    1082:	07 fe       	sbrs	r0, 7
    1084:	fd cf       	rjmp	.-6      	; 0x1080 <spi_transfer+0x2>
    1086:	8e b5       	in	r24, 0x2e	; 46
    1088:	08 95       	ret

0000108a <epd_digital_write>:
    108a:	66 23       	and	r22, r22
    108c:	69 f0       	breq	.+26     	; 0x10a8 <epd_digital_write+0x1e>
    108e:	45 b1       	in	r20, 0x05	; 5
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	b9 01       	movw	r22, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <epd_digital_write+0x12>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <epd_digital_write+0xe>
    10a0:	cb 01       	movw	r24, r22
    10a2:	84 2b       	or	r24, r20
    10a4:	85 b9       	out	0x05, r24	; 5
    10a6:	08 95       	ret
    10a8:	45 b1       	in	r20, 0x05	; 5
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	b9 01       	movw	r22, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <epd_digital_write+0x2c>
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <epd_digital_write+0x28>
    10ba:	cb 01       	movw	r24, r22
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	85 b9       	out	0x05, r24	; 5
    10c2:	08 95       	ret

000010c4 <epd_digital_read>:
    10c4:	29 b1       	in	r18, 0x09	; 9
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <epd_digital_read+0xa>
    10ca:	35 95       	asr	r19
    10cc:	27 95       	ror	r18
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <epd_digital_read+0x6>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	20 ff       	sbrs	r18, 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	08 95       	ret

000010da <epd_spi_transfer>:

// Transfer data to the EPD via SPI
// @param data: the data byte to be transferred
void epd_spi_transfer(uint8_t data) {
    10da:	cf 93       	push	r28
    10dc:	c8 2f       	mov	r28, r24
    epd_digital_write(CS_PIN, false); // Set the Chip Select pin LOW to enable the SPI device
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
    spi_transfer(data); // Transfer the data byte via SPI
    10e6:	8c 2f       	mov	r24, r28
    10e8:	0e 94 3f 08 	call	0x107e	; 0x107e <spi_transfer>
    epd_digital_write(CS_PIN, true); // Set the Chip Select pin HIGH to disable the SPI device
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	0e 94 45 08 	call	0x108a	; 0x108a <epd_digital_write>
}
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <epd_if_init>:
//    
//        // Set the Busy pin as input
//        DDRB &= ~(1 << BUSY_PIN);
//^^DONT THINK THATS NECESARY. ITS ALL IN SPI_INIT

    spi_init(); // Initialize SPI
    10f8:	0e 94 33 08 	call	0x1066	; 0x1066 <spi_init>

    return 0; // Return 0 to indicate successful initialization
}
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	08 95       	ret

00001102 <Paint_Init>:
		if (2 * err <= dx) {
			err += dx;
			y0 += sy;
		}
	}
}
    1102:	fc 01       	movw	r30, r24
    1104:	11 82       	std	Z+1, r1	; 0x01
    1106:	10 82       	st	Z, r1
    1108:	73 83       	std	Z+3, r23	; 0x03
    110a:	62 83       	std	Z+2, r22	; 0x02
    110c:	ca 01       	movw	r24, r20
    110e:	87 70       	andi	r24, 0x07	; 7
    1110:	99 27       	eor	r25, r25
    1112:	89 2b       	or	r24, r25
    1114:	81 f0       	breq	.+32     	; 0x1136 <Paint_Init+0x34>
    1116:	ca 01       	movw	r24, r20
    1118:	08 96       	adiw	r24, 0x08	; 8
    111a:	47 70       	andi	r20, 0x07	; 7
    111c:	50 78       	andi	r21, 0x80	; 128
    111e:	55 23       	and	r21, r21
    1120:	34 f4       	brge	.+12     	; 0x112e <Paint_Init+0x2c>
    1122:	41 50       	subi	r20, 0x01	; 1
    1124:	51 09       	sbc	r21, r1
    1126:	48 6f       	ori	r20, 0xF8	; 248
    1128:	5f 6f       	ori	r21, 0xFF	; 255
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	bc 01       	movw	r22, r24
    1130:	64 1b       	sub	r22, r20
    1132:	75 0b       	sbc	r23, r21
    1134:	ab 01       	movw	r20, r22
    1136:	55 83       	std	Z+5, r21	; 0x05
    1138:	44 83       	std	Z+4, r20	; 0x04
    113a:	37 83       	std	Z+7, r19	; 0x07
    113c:	26 83       	std	Z+6, r18	; 0x06
    113e:	08 95       	ret

00001140 <Paint_DrawAbsolutePixel>:
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	77 23       	and	r23, r23
    1146:	0c f4       	brge	.+2      	; 0x114a <Paint_DrawAbsolutePixel+0xa>
    1148:	72 c0       	rjmp	.+228    	; 0x122e <Paint_DrawAbsolutePixel+0xee>
    114a:	dc 01       	movw	r26, r24
    114c:	14 96       	adiw	r26, 0x04	; 4
    114e:	ed 91       	ld	r30, X+
    1150:	fc 91       	ld	r31, X
    1152:	15 97       	sbiw	r26, 0x05	; 5
    1154:	6e 17       	cp	r22, r30
    1156:	7f 07       	cpc	r23, r31
    1158:	0c f0       	brlt	.+2      	; 0x115c <Paint_DrawAbsolutePixel+0x1c>
    115a:	69 c0       	rjmp	.+210    	; 0x122e <Paint_DrawAbsolutePixel+0xee>
    115c:	55 23       	and	r21, r21
    115e:	0c f4       	brge	.+2      	; 0x1162 <Paint_DrawAbsolutePixel+0x22>
    1160:	66 c0       	rjmp	.+204    	; 0x122e <Paint_DrawAbsolutePixel+0xee>
    1162:	16 96       	adiw	r26, 0x06	; 6
    1164:	0d 90       	ld	r0, X+
    1166:	bc 91       	ld	r27, X
    1168:	a0 2d       	mov	r26, r0
    116a:	4a 17       	cp	r20, r26
    116c:	5b 07       	cpc	r21, r27
    116e:	0c f0       	brlt	.+2      	; 0x1172 <Paint_DrawAbsolutePixel+0x32>
    1170:	5e c0       	rjmp	.+188    	; 0x122e <Paint_DrawAbsolutePixel+0xee>
    1172:	23 2b       	or	r18, r19
    1174:	69 f1       	breq	.+90     	; 0x11d0 <Paint_DrawAbsolutePixel+0x90>
    1176:	ec 01       	movw	r28, r24
    1178:	2a 81       	ldd	r18, Y+2	; 0x02
    117a:	3b 81       	ldd	r19, Y+3	; 0x03
    117c:	e4 9f       	mul	r30, r20
    117e:	c0 01       	movw	r24, r0
    1180:	e5 9f       	mul	r30, r21
    1182:	90 0d       	add	r25, r0
    1184:	f4 9f       	mul	r31, r20
    1186:	90 0d       	add	r25, r0
    1188:	11 24       	eor	r1, r1
    118a:	86 0f       	add	r24, r22
    118c:	97 1f       	adc	r25, r23
    118e:	99 23       	and	r25, r25
    1190:	0c f4       	brge	.+2      	; 0x1194 <Paint_DrawAbsolutePixel+0x54>
    1192:	07 96       	adiw	r24, 0x07	; 7
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	f9 01       	movw	r30, r18
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	67 70       	andi	r22, 0x07	; 7
    11a8:	70 78       	andi	r23, 0x80	; 128
    11aa:	77 23       	and	r23, r23
    11ac:	34 f4       	brge	.+12     	; 0x11ba <Paint_DrawAbsolutePixel+0x7a>
    11ae:	61 50       	subi	r22, 0x01	; 1
    11b0:	71 09       	sbc	r23, r1
    11b2:	68 6f       	ori	r22, 0xF8	; 248
    11b4:	7f 6f       	ori	r23, 0xFF	; 255
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	80 e8       	ldi	r24, 0x80	; 128
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <Paint_DrawAbsolutePixel+0x84>
    11c0:	95 95       	asr	r25
    11c2:	87 95       	ror	r24
    11c4:	6a 95       	dec	r22
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <Paint_DrawAbsolutePixel+0x80>
    11c8:	90 81       	ld	r25, Z
    11ca:	89 2b       	or	r24, r25
    11cc:	80 83       	st	Z, r24
    11ce:	2f c0       	rjmp	.+94     	; 0x122e <Paint_DrawAbsolutePixel+0xee>
    11d0:	dc 01       	movw	r26, r24
    11d2:	12 96       	adiw	r26, 0x02	; 2
    11d4:	2d 91       	ld	r18, X+
    11d6:	3c 91       	ld	r19, X
    11d8:	13 97       	sbiw	r26, 0x03	; 3
    11da:	e4 9f       	mul	r30, r20
    11dc:	c0 01       	movw	r24, r0
    11de:	e5 9f       	mul	r30, r21
    11e0:	90 0d       	add	r25, r0
    11e2:	f4 9f       	mul	r31, r20
    11e4:	90 0d       	add	r25, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	86 0f       	add	r24, r22
    11ea:	97 1f       	adc	r25, r23
    11ec:	99 23       	and	r25, r25
    11ee:	0c f4       	brge	.+2      	; 0x11f2 <Paint_DrawAbsolutePixel+0xb2>
    11f0:	07 96       	adiw	r24, 0x07	; 7
    11f2:	95 95       	asr	r25
    11f4:	87 95       	ror	r24
    11f6:	95 95       	asr	r25
    11f8:	87 95       	ror	r24
    11fa:	95 95       	asr	r25
    11fc:	87 95       	ror	r24
    11fe:	f9 01       	movw	r30, r18
    1200:	e8 0f       	add	r30, r24
    1202:	f9 1f       	adc	r31, r25
    1204:	67 70       	andi	r22, 0x07	; 7
    1206:	70 78       	andi	r23, 0x80	; 128
    1208:	77 23       	and	r23, r23
    120a:	34 f4       	brge	.+12     	; 0x1218 <Paint_DrawAbsolutePixel+0xd8>
    120c:	61 50       	subi	r22, 0x01	; 1
    120e:	71 09       	sbc	r23, r1
    1210:	68 6f       	ori	r22, 0xF8	; 248
    1212:	7f 6f       	ori	r23, 0xFF	; 255
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	80 e8       	ldi	r24, 0x80	; 128
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <Paint_DrawAbsolutePixel+0xe2>
    121e:	95 95       	asr	r25
    1220:	87 95       	ror	r24
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <Paint_DrawAbsolutePixel+0xde>
    1226:	80 95       	com	r24
    1228:	90 81       	ld	r25, Z
    122a:	89 23       	and	r24, r25
    122c:	80 83       	st	Z, r24
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <Paint_Clear>:
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	8c 01       	movw	r16, r24
    1246:	6b 01       	movw	r12, r22
    1248:	e1 2c       	mov	r14, r1
    124a:	f1 2c       	mov	r15, r1
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <Paint_Clear+0x40>
    124e:	96 01       	movw	r18, r12
    1250:	ae 01       	movw	r20, r28
    1252:	b7 01       	movw	r22, r14
    1254:	c8 01       	movw	r24, r16
    1256:	0e 94 a0 08 	call	0x1140	; 0x1140 <Paint_DrawAbsolutePixel>
    125a:	21 96       	adiw	r28, 0x01	; 1
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <Paint_Clear+0x2e>
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	d0 e0       	ldi	r29, 0x00	; 0
    1262:	f8 01       	movw	r30, r16
    1264:	86 81       	ldd	r24, Z+6	; 0x06
    1266:	97 81       	ldd	r25, Z+7	; 0x07
    1268:	c8 17       	cp	r28, r24
    126a:	d9 07       	cpc	r29, r25
    126c:	84 f3       	brlt	.-32     	; 0x124e <Paint_Clear+0x1a>
    126e:	ff ef       	ldi	r31, 0xFF	; 255
    1270:	ef 1a       	sub	r14, r31
    1272:	ff 0a       	sbc	r15, r31
    1274:	f8 01       	movw	r30, r16
    1276:	84 81       	ldd	r24, Z+4	; 0x04
    1278:	95 81       	ldd	r25, Z+5	; 0x05
    127a:	e8 16       	cp	r14, r24
    127c:	f9 06       	cpc	r15, r25
    127e:	7c f3       	brlt	.-34     	; 0x125e <Paint_Clear+0x2a>
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	08 95       	ret

00001292 <Paint_GetImage>:
    1292:	fc 01       	movw	r30, r24
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	93 81       	ldd	r25, Z+3	; 0x03
    1298:	08 95       	ret

0000129a <Paint_SetRotate>:
    129a:	fc 01       	movw	r30, r24
    129c:	71 83       	std	Z+1, r23	; 0x01
    129e:	60 83       	st	Z, r22
    12a0:	08 95       	ret

000012a2 <Paint_DrawPixel>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	fa 01       	movw	r30, r20
    12a8:	dc 01       	movw	r26, r24
    12aa:	4d 91       	ld	r20, X+
    12ac:	5c 91       	ld	r21, X
    12ae:	11 97       	sbiw	r26, 0x01	; 1
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	d1 f4       	brne	.+52     	; 0x12ea <Paint_DrawPixel+0x48>
    12b6:	77 23       	and	r23, r23
    12b8:	0c f4       	brge	.+2      	; 0x12bc <Paint_DrawPixel+0x1a>
    12ba:	6a c0       	rjmp	.+212    	; 0x1390 <Paint_DrawPixel+0xee>
    12bc:	14 96       	adiw	r26, 0x04	; 4
    12be:	4d 91       	ld	r20, X+
    12c0:	5c 91       	ld	r21, X
    12c2:	15 97       	sbiw	r26, 0x05	; 5
    12c4:	64 17       	cp	r22, r20
    12c6:	75 07       	cpc	r23, r21
    12c8:	0c f0       	brlt	.+2      	; 0x12cc <Paint_DrawPixel+0x2a>
    12ca:	62 c0       	rjmp	.+196    	; 0x1390 <Paint_DrawPixel+0xee>
    12cc:	ff 23       	and	r31, r31
    12ce:	0c f4       	brge	.+2      	; 0x12d2 <Paint_DrawPixel+0x30>
    12d0:	5f c0       	rjmp	.+190    	; 0x1390 <Paint_DrawPixel+0xee>
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	4d 91       	ld	r20, X+
    12d6:	5c 91       	ld	r21, X
    12d8:	17 97       	sbiw	r26, 0x07	; 7
    12da:	e4 17       	cp	r30, r20
    12dc:	f5 07       	cpc	r31, r21
    12de:	0c f0       	brlt	.+2      	; 0x12e2 <Paint_DrawPixel+0x40>
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <Paint_DrawPixel+0xee>
    12e2:	af 01       	movw	r20, r30
    12e4:	0e 94 a0 08 	call	0x1140	; 0x1140 <Paint_DrawAbsolutePixel>
    12e8:	53 c0       	rjmp	.+166    	; 0x1390 <Paint_DrawPixel+0xee>
    12ea:	41 30       	cpi	r20, 0x01	; 1
    12ec:	51 05       	cpc	r21, r1
    12ee:	d1 f4       	brne	.+52     	; 0x1324 <Paint_DrawPixel+0x82>
    12f0:	77 23       	and	r23, r23
    12f2:	0c f4       	brge	.+2      	; 0x12f6 <Paint_DrawPixel+0x54>
    12f4:	4d c0       	rjmp	.+154    	; 0x1390 <Paint_DrawPixel+0xee>
    12f6:	ec 01       	movw	r28, r24
    12f8:	4e 81       	ldd	r20, Y+6	; 0x06
    12fa:	5f 81       	ldd	r21, Y+7	; 0x07
    12fc:	64 17       	cp	r22, r20
    12fe:	75 07       	cpc	r23, r21
    1300:	0c f0       	brlt	.+2      	; 0x1304 <Paint_DrawPixel+0x62>
    1302:	46 c0       	rjmp	.+140    	; 0x1390 <Paint_DrawPixel+0xee>
    1304:	ff 23       	and	r31, r31
    1306:	0c f4       	brge	.+2      	; 0x130a <Paint_DrawPixel+0x68>
    1308:	43 c0       	rjmp	.+134    	; 0x1390 <Paint_DrawPixel+0xee>
    130a:	4c 81       	ldd	r20, Y+4	; 0x04
    130c:	5d 81       	ldd	r21, Y+5	; 0x05
    130e:	e4 17       	cp	r30, r20
    1310:	f5 07       	cpc	r31, r21
    1312:	f4 f5       	brge	.+124    	; 0x1390 <Paint_DrawPixel+0xee>
    1314:	da 01       	movw	r26, r20
    1316:	ae 1b       	sub	r26, r30
    1318:	bf 0b       	sbc	r27, r31
    131a:	ab 01       	movw	r20, r22
    131c:	bd 01       	movw	r22, r26
    131e:	0e 94 a0 08 	call	0x1140	; 0x1140 <Paint_DrawAbsolutePixel>
    1322:	36 c0       	rjmp	.+108    	; 0x1390 <Paint_DrawPixel+0xee>
    1324:	42 30       	cpi	r20, 0x02	; 2
    1326:	51 05       	cpc	r21, r1
    1328:	c1 f4       	brne	.+48     	; 0x135a <Paint_DrawPixel+0xb8>
    132a:	77 23       	and	r23, r23
    132c:	8c f1       	brlt	.+98     	; 0x1390 <Paint_DrawPixel+0xee>
    132e:	ec 01       	movw	r28, r24
    1330:	ac 81       	ldd	r26, Y+4	; 0x04
    1332:	bd 81       	ldd	r27, Y+5	; 0x05
    1334:	6a 17       	cp	r22, r26
    1336:	7b 07       	cpc	r23, r27
    1338:	5c f5       	brge	.+86     	; 0x1390 <Paint_DrawPixel+0xee>
    133a:	ff 23       	and	r31, r31
    133c:	4c f1       	brlt	.+82     	; 0x1390 <Paint_DrawPixel+0xee>
    133e:	4e 81       	ldd	r20, Y+6	; 0x06
    1340:	5f 81       	ldd	r21, Y+7	; 0x07
    1342:	e4 17       	cp	r30, r20
    1344:	f5 07       	cpc	r31, r21
    1346:	24 f5       	brge	.+72     	; 0x1390 <Paint_DrawPixel+0xee>
    1348:	ed 01       	movw	r28, r26
    134a:	c6 1b       	sub	r28, r22
    134c:	d7 0b       	sbc	r29, r23
    134e:	be 01       	movw	r22, r28
    1350:	4e 1b       	sub	r20, r30
    1352:	5f 0b       	sbc	r21, r31
    1354:	0e 94 a0 08 	call	0x1140	; 0x1140 <Paint_DrawAbsolutePixel>
    1358:	1b c0       	rjmp	.+54     	; 0x1390 <Paint_DrawPixel+0xee>
    135a:	43 30       	cpi	r20, 0x03	; 3
    135c:	51 05       	cpc	r21, r1
    135e:	c1 f4       	brne	.+48     	; 0x1390 <Paint_DrawPixel+0xee>
    1360:	77 23       	and	r23, r23
    1362:	b4 f0       	brlt	.+44     	; 0x1390 <Paint_DrawPixel+0xee>
    1364:	dc 01       	movw	r26, r24
    1366:	16 96       	adiw	r26, 0x06	; 6
    1368:	4d 91       	ld	r20, X+
    136a:	5c 91       	ld	r21, X
    136c:	17 97       	sbiw	r26, 0x07	; 7
    136e:	64 17       	cp	r22, r20
    1370:	75 07       	cpc	r23, r21
    1372:	74 f4       	brge	.+28     	; 0x1390 <Paint_DrawPixel+0xee>
    1374:	ff 23       	and	r31, r31
    1376:	64 f0       	brlt	.+24     	; 0x1390 <Paint_DrawPixel+0xee>
    1378:	14 96       	adiw	r26, 0x04	; 4
    137a:	0d 90       	ld	r0, X+
    137c:	bc 91       	ld	r27, X
    137e:	a0 2d       	mov	r26, r0
    1380:	ea 17       	cp	r30, r26
    1382:	fb 07       	cpc	r31, r27
    1384:	2c f4       	brge	.+10     	; 0x1390 <Paint_DrawPixel+0xee>
    1386:	46 1b       	sub	r20, r22
    1388:	57 0b       	sbc	r21, r23
    138a:	bf 01       	movw	r22, r30
    138c:	0e 94 a0 08 	call	0x1140	; 0x1140 <Paint_DrawAbsolutePixel>
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <Paint_DrawCharAt>:
    1396:	2f 92       	push	r2
    1398:	3f 92       	push	r3
    139a:	4f 92       	push	r4
    139c:	5f 92       	push	r5
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	8f 92       	push	r8
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	2c 01       	movw	r4, r24
    13bc:	6b 01       	movw	r12, r22
    13be:	5a 01       	movw	r10, r20
    13c0:	17 01       	movw	r2, r14
    13c2:	82 2f       	mov	r24, r18
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	80 97       	sbiw	r24, 0x20	; 32
    13c8:	f8 01       	movw	r30, r16
    13ca:	44 81       	ldd	r20, Z+4	; 0x04
    13cc:	55 81       	ldd	r21, Z+5	; 0x05
    13ce:	84 9f       	mul	r24, r20
    13d0:	90 01       	movw	r18, r0
    13d2:	85 9f       	mul	r24, r21
    13d4:	30 0d       	add	r19, r0
    13d6:	94 9f       	mul	r25, r20
    13d8:	30 0d       	add	r19, r0
    13da:	11 24       	eor	r1, r1
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	ac 01       	movw	r20, r24
    13e2:	56 95       	lsr	r21
    13e4:	47 95       	ror	r20
    13e6:	56 95       	lsr	r21
    13e8:	47 95       	ror	r20
    13ea:	56 95       	lsr	r21
    13ec:	47 95       	ror	r20
    13ee:	87 70       	andi	r24, 0x07	; 7
    13f0:	99 27       	eor	r25, r25
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	11 f0       	breq	.+4      	; 0x13fa <Paint_DrawCharAt+0x64>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	84 0f       	add	r24, r20
    13fc:	95 1f       	adc	r25, r21
    13fe:	28 9f       	mul	r18, r24
    1400:	a0 01       	movw	r20, r0
    1402:	29 9f       	mul	r18, r25
    1404:	50 0d       	add	r21, r0
    1406:	38 9f       	mul	r19, r24
    1408:	50 0d       	add	r21, r0
    140a:	11 24       	eor	r1, r1
    140c:	f8 01       	movw	r30, r16
    140e:	80 80       	ld	r8, Z
    1410:	91 80       	ldd	r9, Z+1	; 0x01
    1412:	84 0e       	add	r8, r20
    1414:	95 1e       	adc	r9, r21
    1416:	61 2c       	mov	r6, r1
    1418:	71 2c       	mov	r7, r1
    141a:	41 c0       	rjmp	.+130    	; 0x149e <Paint_DrawCharAt+0x108>
    141c:	f4 01       	movw	r30, r8
    141e:	44 91       	lpm	r20, Z
    1420:	9e 01       	movw	r18, r28
    1422:	27 70       	andi	r18, 0x07	; 7
    1424:	30 78       	andi	r19, 0x80	; 128
    1426:	33 23       	and	r19, r19
    1428:	34 f4       	brge	.+12     	; 0x1436 <Paint_DrawCharAt+0xa0>
    142a:	21 50       	subi	r18, 0x01	; 1
    142c:	31 09       	sbc	r19, r1
    142e:	28 6f       	ori	r18, 0xF8	; 248
    1430:	3f 6f       	ori	r19, 0xFF	; 255
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	79 01       	movw	r14, r18
    1438:	80 e8       	ldi	r24, 0x80	; 128
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	bc 01       	movw	r22, r24
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <Paint_DrawCharAt+0xae>
    1440:	75 95       	asr	r23
    1442:	67 95       	ror	r22
    1444:	2a 95       	dec	r18
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <Paint_DrawCharAt+0xaa>
    1448:	84 2f       	mov	r24, r20
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	86 23       	and	r24, r22
    144e:	97 23       	and	r25, r23
    1450:	89 2b       	or	r24, r25
    1452:	51 f0       	breq	.+20     	; 0x1468 <Paint_DrawCharAt+0xd2>
    1454:	91 01       	movw	r18, r2
    1456:	a3 01       	movw	r20, r6
    1458:	4a 0d       	add	r20, r10
    145a:	5b 1d       	adc	r21, r11
    145c:	be 01       	movw	r22, r28
    145e:	6c 0d       	add	r22, r12
    1460:	7d 1d       	adc	r23, r13
    1462:	c2 01       	movw	r24, r4
    1464:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Paint_DrawPixel>
    1468:	77 e0       	ldi	r23, 0x07	; 7
    146a:	e7 16       	cp	r14, r23
    146c:	f1 04       	cpc	r15, r1
    146e:	19 f4       	brne	.+6      	; 0x1476 <Paint_DrawCharAt+0xe0>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	88 1a       	sub	r8, r24
    1474:	98 0a       	sbc	r9, r24
    1476:	21 96       	adiw	r28, 0x01	; 1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <Paint_DrawCharAt+0xe8>
    147a:	c0 e0       	ldi	r28, 0x00	; 0
    147c:	d0 e0       	ldi	r29, 0x00	; 0
    147e:	f8 01       	movw	r30, r16
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	c8 17       	cp	r28, r24
    1486:	d9 07       	cpc	r29, r25
    1488:	48 f2       	brcs	.-110    	; 0x141c <Paint_DrawCharAt+0x86>
    148a:	87 70       	andi	r24, 0x07	; 7
    148c:	99 27       	eor	r25, r25
    148e:	89 2b       	or	r24, r25
    1490:	19 f0       	breq	.+6      	; 0x1498 <Paint_DrawCharAt+0x102>
    1492:	ff ef       	ldi	r31, 0xFF	; 255
    1494:	8f 1a       	sub	r8, r31
    1496:	9f 0a       	sbc	r9, r31
    1498:	6f ef       	ldi	r22, 0xFF	; 255
    149a:	66 1a       	sub	r6, r22
    149c:	76 0a       	sbc	r7, r22
    149e:	f8 01       	movw	r30, r16
    14a0:	84 81       	ldd	r24, Z+4	; 0x04
    14a2:	95 81       	ldd	r25, Z+5	; 0x05
    14a4:	68 16       	cp	r6, r24
    14a6:	79 06       	cpc	r7, r25
    14a8:	40 f3       	brcs	.-48     	; 0x147a <Paint_DrawCharAt+0xe4>
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	7f 90       	pop	r7
    14c4:	6f 90       	pop	r6
    14c6:	5f 90       	pop	r5
    14c8:	4f 90       	pop	r4
    14ca:	3f 90       	pop	r3
    14cc:	2f 90       	pop	r2
    14ce:	08 95       	ret

000014d0 <Paint_DrawStringAt>:
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	4c 01       	movw	r8, r24
    14f2:	eb 01       	movw	r28, r22
    14f4:	5a 01       	movw	r10, r20
    14f6:	39 01       	movw	r6, r18
    14f8:	68 01       	movw	r12, r16
    14fa:	27 01       	movw	r4, r14
    14fc:	10 c0       	rjmp	.+32     	; 0x151e <Paint_DrawStringAt+0x4e>
    14fe:	72 01       	movw	r14, r4
    1500:	86 01       	movw	r16, r12
    1502:	a5 01       	movw	r20, r10
    1504:	be 01       	movw	r22, r28
    1506:	c4 01       	movw	r24, r8
    1508:	0e 94 cb 09 	call	0x1396	; 0x1396 <Paint_DrawCharAt>
    150c:	f6 01       	movw	r30, r12
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	c8 0f       	add	r28, r24
    1514:	d9 1f       	adc	r29, r25
    1516:	22 97       	sbiw	r28, 0x02	; 2
    1518:	ff ef       	ldi	r31, 0xFF	; 255
    151a:	6f 1a       	sub	r6, r31
    151c:	7f 0a       	sbc	r7, r31
    151e:	f3 01       	movw	r30, r6
    1520:	20 81       	ld	r18, Z
    1522:	21 11       	cpse	r18, r1
    1524:	ec cf       	rjmp	.-40     	; 0x14fe <Paint_DrawStringAt+0x2e>
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	9f 90       	pop	r9
    153c:	8f 90       	pop	r8
    153e:	7f 90       	pop	r7
    1540:	6f 90       	pop	r6
    1542:	5f 90       	pop	r5
    1544:	4f 90       	pop	r4
    1546:	08 95       	ret

00001548 <Paint_DrawHorizontalLine>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
    1548:	8f 92       	push	r8
    154a:	9f 92       	push	r9
    154c:	af 92       	push	r10
    154e:	bf 92       	push	r11
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	4c 01       	movw	r8, r24
    1562:	7b 01       	movw	r14, r22
    1564:	5a 01       	movw	r10, r20
    1566:	69 01       	movw	r12, r18
	int i;
	for (i = x; i < x + line_width; i++) {
    1568:	eb 01       	movw	r28, r22
    156a:	07 c0       	rjmp	.+14     	; 0x157a <Paint_DrawHorizontalLine+0x32>
		Paint_DrawPixel(paint, i, y, colored);
    156c:	98 01       	movw	r18, r16
    156e:	a5 01       	movw	r20, r10
    1570:	be 01       	movw	r22, r28
    1572:	c4 01       	movw	r24, r8
    1574:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Paint_DrawPixel>
/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
	int i;
	for (i = x; i < x + line_width; i++) {
    1578:	21 96       	adiw	r28, 0x01	; 1
    157a:	c7 01       	movw	r24, r14
    157c:	8c 0d       	add	r24, r12
    157e:	9d 1d       	adc	r25, r13
    1580:	c8 17       	cp	r28, r24
    1582:	d9 07       	cpc	r29, r25
    1584:	9c f3       	brlt	.-26     	; 0x156c <Paint_DrawHorizontalLine+0x24>
		Paint_DrawPixel(paint, i, y, colored);
	}
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	9f 90       	pop	r9
    159c:	8f 90       	pop	r8
    159e:	08 95       	ret

000015a0 <Paint_DrawVerticalLine>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	4c 01       	movw	r8, r24
    15ba:	5b 01       	movw	r10, r22
    15bc:	7a 01       	movw	r14, r20
    15be:	69 01       	movw	r12, r18
	int i;
	for (i = y; i < y + line_height; i++) {
    15c0:	ea 01       	movw	r28, r20
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <Paint_DrawVerticalLine+0x32>
		Paint_DrawPixel(paint, x, i, colored);
    15c4:	98 01       	movw	r18, r16
    15c6:	ae 01       	movw	r20, r28
    15c8:	b5 01       	movw	r22, r10
    15ca:	c4 01       	movw	r24, r8
    15cc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Paint_DrawPixel>
/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
	int i;
	for (i = y; i < y + line_height; i++) {
    15d0:	21 96       	adiw	r28, 0x01	; 1
    15d2:	c7 01       	movw	r24, r14
    15d4:	8c 0d       	add	r24, r12
    15d6:	9d 1d       	adc	r25, r13
    15d8:	c8 17       	cp	r28, r24
    15da:	d9 07       	cpc	r29, r25
    15dc:	9c f3       	brlt	.-26     	; 0x15c4 <Paint_DrawVerticalLine+0x24>
		Paint_DrawPixel(paint, x, i, colored);
	}
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	08 95       	ret

000015f8 <init_interface>:
#include <string.h>
#include <stdlib.h>


void init_interface(Interface* interface) {
	epd_init();
    15f8:	0e 94 84 06 	call	0xd08	; 0xd08 <epd_init>
	epd_clear(1);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 fd 07 	call	0xffa	; 0xffa <epd_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1602:	2f e3       	ldi	r18, 0x3F	; 63
    1604:	8d e0       	ldi	r24, 0x0D	; 13
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	80 40       	sbci	r24, 0x00	; 0
    160c:	90 40       	sbci	r25, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <init_interface+0x10>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <init_interface+0x1a>
    1612:	00 00       	nop
    1614:	08 95       	ret

00001616 <draw_string_box>:
void update_answer_box(char *answer)
{
	draw_string_box(144, 216, 32, 256, answer, false);
}

void draw_string_box(int xStart, int yStart, int width, int height, const char *string, bool borders){
    1616:	2f 92       	push	r2
    1618:	3f 92       	push	r3
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	66 97       	sbiw	r28, 0x16	; 22
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9a 8b       	std	Y+18, r25	; 0x12
    164c:	89 8b       	std	Y+17, r24	; 0x11
    164e:	7c 8b       	std	Y+20, r23	; 0x14
    1650:	6b 8b       	std	Y+19, r22	; 0x13
    1652:	5e 87       	std	Y+14, r21	; 0x0e
    1654:	4d 87       	std	Y+13, r20	; 0x0d
    1656:	38 8b       	std	Y+16, r19	; 0x10
    1658:	2f 87       	std	Y+15, r18	; 0x0f
    165a:	58 01       	movw	r10, r16
	epd_turn_on_display();
	
	epd_display_frame_part(Paint_GetImage(&paint), xStart, yStart, xStart+width, yStart+height, false);
	
//	free(image);
}
    165c:	2d b7       	in	r18, 0x3d	; 61
    165e:	3e b7       	in	r19, 0x3e	; 62
    1660:	3e 8b       	std	Y+22, r19	; 0x16
    1662:	2d 8b       	std	Y+21, r18	; 0x15

void draw_string_box(int xStart, int yStart, int width, int height, const char *string, bool borders){
	//string = "this is some bs. Why TF IS IT NOT WORKING";
	int space_between_lines = 15;
	
	int image_size = width / 8 * height ;  // Calculate the size of the image buffer
    1664:	ca 01       	movw	r24, r20
    1666:	55 23       	and	r21, r21
    1668:	0c f4       	brge	.+2      	; 0x166c <draw_string_box+0x56>
    166a:	07 96       	adiw	r24, 0x07	; 7
    166c:	95 95       	asr	r25
    166e:	87 95       	ror	r24
    1670:	95 95       	asr	r25
    1672:	87 95       	ror	r24
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	4f 85       	ldd	r20, Y+15	; 0x0f
    167a:	58 89       	ldd	r21, Y+16	; 0x10
    167c:	84 9f       	mul	r24, r20
    167e:	90 01       	movw	r18, r0
    1680:	85 9f       	mul	r24, r21
    1682:	30 0d       	add	r19, r0
    1684:	94 9f       	mul	r25, r20
    1686:	30 0d       	add	r19, r0
    1688:	11 24       	eor	r1, r1
	
	//init paint
	Paint paint;
	unsigned char image[image_size];
    168a:	8d b7       	in	r24, 0x3d	; 61
    168c:	9e b7       	in	r25, 0x3e	; 62
    168e:	82 1b       	sub	r24, r18
    1690:	93 0b       	sbc	r25, r19
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	9e bf       	out	0x3e, r25	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	8d bf       	out	0x3d, r24	; 61
    169c:	6d b7       	in	r22, 0x3d	; 61
    169e:	7e b7       	in	r23, 0x3e	; 62
    16a0:	6f 5f       	subi	r22, 0xFF	; 255
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
// 	unsigned char *image = (unsigned char *) malloc(image_size * sizeof(unsigned char)); // Allocate memory dynamically
// 	if (image == NULL) {
// 		draw_string_box(8, 8, 72, 72, "not enough mem", true);
// 	}
	Paint_Init(&paint, image, width, height);
    16a4:	9a 01       	movw	r18, r20
    16a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    16a8:	5e 85       	ldd	r21, Y+14	; 0x0e
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 81 08 	call	0x1102	; 0x1102 <Paint_Init>
	Paint_SetRotate(&paint, ROTATE_270);
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	0e 94 4d 09 	call	0x129a	; 0x129a <Paint_SetRotate>
	Paint_Clear(&paint, 1);
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 1a 09 	call	0x1234	; 0x1234 <Paint_Clear>
	
	//draw border
	if (borders) {
    16ca:	ee 20       	and	r14, r14
    16cc:	71 f1       	breq	.+92     	; 0x172a <draw_string_box+0x114>
		Paint_DrawHorizontalLine(&paint, 0, 0, height, 0);
    16ce:	00 e0       	ldi	r16, 0x00	; 0
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    16d4:	38 89       	ldd	r19, Y+16	; 0x10
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Paint_DrawHorizontalLine>
		Paint_DrawHorizontalLine(&paint, 0, width-1, height, 0);
    16e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    16e8:	38 89       	ldd	r19, Y+16	; 0x10
    16ea:	4d 85       	ldd	r20, Y+13	; 0x0d
    16ec:	5e 85       	ldd	r21, Y+14	; 0x0e
    16ee:	41 50       	subi	r20, 0x01	; 1
    16f0:	51 09       	sbc	r21, r1
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Paint_DrawHorizontalLine>
		Paint_DrawVerticalLine(&paint, 1, 0, width, 0);
    16fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1700:	3e 85       	ldd	r19, Y+14	; 0x0e
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Paint_DrawVerticalLine>
		Paint_DrawVerticalLine(&paint, height-1, 0, width, 0);
    1712:	2d 85       	ldd	r18, Y+13	; 0x0d
    1714:	3e 85       	ldd	r19, Y+14	; 0x0e
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	6f 85       	ldd	r22, Y+15	; 0x0f
    171c:	78 89       	ldd	r23, Y+16	; 0x10
    171e:	61 50       	subi	r22, 0x01	; 1
    1720:	71 09       	sbc	r23, r1
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Paint_DrawVerticalLine>
	}
	
	
	
	int max_chars_per_line = height / 9;
    172a:	8f 85       	ldd	r24, Y+15	; 0x0f
    172c:	98 89       	ldd	r25, Y+16	; 0x10
    172e:	69 e0       	ldi	r22, 0x09	; 9
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divmodhi4>
    1736:	1b 01       	movw	r2, r22
	int current_line = 0;
	size_t string_length = strlen(string);
    1738:	f5 01       	movw	r30, r10
    173a:	01 90       	ld	r0, Z+
    173c:	00 20       	and	r0, r0
    173e:	e9 f7       	brne	.-6      	; 0x173a <draw_string_box+0x124>
    1740:	31 97       	sbiw	r30, 0x01	; 1
    1742:	3f 01       	movw	r6, r30
    1744:	6a 18       	sub	r6, r10
    1746:	7b 08       	sbc	r7, r11
	size_t start_pos = 0;
    1748:	41 2c       	mov	r4, r1
    174a:	51 2c       	mov	r5, r1
	}
	
	
	
	int max_chars_per_line = height / 9;
	int current_line = 0;
    174c:	81 2c       	mov	r8, r1
    174e:	91 2c       	mov	r9, r1
	size_t string_length = strlen(string);
	size_t start_pos = 0;

	while (start_pos < string_length) {
    1750:	66 c0       	rjmp	.+204    	; 0x181e <draw_string_box+0x208>
		int chars_to_copy = max_chars_per_line;
		if (start_pos + chars_to_copy < string_length) {
    1752:	c1 01       	movw	r24, r2
    1754:	84 0d       	add	r24, r4
    1756:	95 1d       	adc	r25, r5
    1758:	86 15       	cp	r24, r6
    175a:	97 05       	cpc	r25, r7
    175c:	28 f0       	brcs	.+10     	; 0x1768 <draw_string_box+0x152>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <draw_string_box+0x172>
			while (string[start_pos + chars_to_copy] != ' ' && chars_to_copy > 0) {
				chars_to_copy--;
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	c9 1a       	sub	r12, r25
    1764:	d1 08       	sbc	r13, r1
    1766:	01 c0       	rjmp	.+2      	; 0x176a <draw_string_box+0x154>
    1768:	61 01       	movw	r12, r2
	size_t start_pos = 0;

	while (start_pos < string_length) {
		int chars_to_copy = max_chars_per_line;
		if (start_pos + chars_to_copy < string_length) {
			while (string[start_pos + chars_to_copy] != ' ' && chars_to_copy > 0) {
    176a:	f6 01       	movw	r30, r12
    176c:	e4 0d       	add	r30, r4
    176e:	f5 1d       	adc	r31, r5
    1770:	ea 0d       	add	r30, r10
    1772:	fb 1d       	adc	r31, r11
    1774:	80 81       	ld	r24, Z
    1776:	80 32       	cpi	r24, 0x20	; 32
    1778:	19 f0       	breq	.+6      	; 0x1780 <draw_string_box+0x16a>
    177a:	1c 14       	cp	r1, r12
    177c:	1d 04       	cpc	r1, r13
    177e:	84 f3       	brlt	.-32     	; 0x1760 <draw_string_box+0x14a>
				chars_to_copy--;
			}
			if (chars_to_copy == 0) {
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	29 f0       	breq	.+10     	; 0x1790 <draw_string_box+0x17a>
    1786:	05 c0       	rjmp	.+10     	; 0x1792 <draw_string_box+0x17c>
				chars_to_copy = max_chars_per_line;
			}
		} else {
			chars_to_copy = string_length - start_pos;
    1788:	63 01       	movw	r12, r6
    178a:	c4 18       	sub	r12, r4
    178c:	d5 08       	sbc	r13, r5
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <draw_string_box+0x17c>
		if (start_pos + chars_to_copy < string_length) {
			while (string[start_pos + chars_to_copy] != ' ' && chars_to_copy > 0) {
				chars_to_copy--;
			}
			if (chars_to_copy == 0) {
				chars_to_copy = max_chars_per_line;
    1790:	61 01       	movw	r12, r2
			}
		} else {
			chars_to_copy = string_length - start_pos;
		}

		char subset_individual_line[max_chars_per_line + 1];
    1792:	2d b7       	in	r18, 0x3d	; 61
    1794:	3e b7       	in	r19, 0x3e	; 62
    1796:	3c 87       	std	Y+12, r19	; 0x0c
    1798:	2b 87       	std	Y+11, r18	; 0x0b
    179a:	c1 01       	movw	r24, r2
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	4d b7       	in	r20, 0x3d	; 61
    17a0:	5e b7       	in	r21, 0x3e	; 62
    17a2:	48 1b       	sub	r20, r24
    17a4:	59 0b       	sbc	r21, r25
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	5e bf       	out	0x3e, r21	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	4d bf       	out	0x3d, r20	; 61
    17b0:	8d b7       	in	r24, 0x3d	; 61
    17b2:	9e b7       	in	r25, 0x3e	; 62
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9a 87       	std	Y+10, r25	; 0x0a
    17b8:	89 87       	std	Y+9, r24	; 0x09
		strncpy(subset_individual_line, string + start_pos, chars_to_copy);
    17ba:	b5 01       	movw	r22, r10
    17bc:	64 0d       	add	r22, r4
    17be:	75 1d       	adc	r23, r5
    17c0:	a6 01       	movw	r20, r12
    17c2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <strncpy>
		subset_individual_line[chars_to_copy] = '\0';
    17c6:	e9 85       	ldd	r30, Y+9	; 0x09
    17c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    17ca:	ec 0d       	add	r30, r12
    17cc:	fd 1d       	adc	r31, r13
    17ce:	10 82       	st	Z, r1
		
		

		int xPos = 0;
		int yPos = current_line * space_between_lines;
    17d0:	8f e0       	ldi	r24, 0x0F	; 15
    17d2:	88 9d       	mul	r24, r8
    17d4:	a0 01       	movw	r20, r0
    17d6:	89 9d       	mul	r24, r9
    17d8:	50 0d       	add	r21, r0
    17da:	11 24       	eor	r1, r1
		Paint_DrawStringAt(&paint, xPos, yPos, subset_individual_line, &Font16, 0);
    17dc:	e1 2c       	mov	r14, r1
    17de:	f1 2c       	mov	r15, r1
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	11 e0       	ldi	r17, 0x01	; 1
    17e4:	29 85       	ldd	r18, Y+9	; 0x09
    17e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	ce 01       	movw	r24, r28
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <Paint_DrawStringAt>

		start_pos += chars_to_copy;
    17f4:	4c 0c       	add	r4, r12
    17f6:	5d 1c       	adc	r5, r13
		if (string[start_pos] == ' ') {
    17f8:	f5 01       	movw	r30, r10
    17fa:	e4 0d       	add	r30, r4
    17fc:	f5 1d       	adc	r31, r5
    17fe:	80 81       	ld	r24, Z
    1800:	80 32       	cpi	r24, 0x20	; 32
    1802:	19 f4       	brne	.+6      	; 0x180a <draw_string_box+0x1f4>
			start_pos++; // Skip the space character
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	49 1a       	sub	r4, r25
    1808:	59 0a       	sbc	r5, r25
		}
		current_line++;
    180a:	2f ef       	ldi	r18, 0xFF	; 255
    180c:	82 1a       	sub	r8, r18
    180e:	92 0a       	sbc	r9, r18
    1810:	4b 85       	ldd	r20, Y+11	; 0x0b
    1812:	5c 85       	ldd	r21, Y+12	; 0x0c
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	5e bf       	out	0x3e, r21	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	4d bf       	out	0x3d, r20	; 61
	int max_chars_per_line = height / 9;
	int current_line = 0;
	size_t string_length = strlen(string);
	size_t start_pos = 0;

	while (start_pos < string_length) {
    181e:	46 14       	cp	r4, r6
    1820:	57 04       	cpc	r5, r7
    1822:	08 f4       	brcc	.+2      	; 0x1826 <draw_string_box+0x210>
    1824:	96 cf       	rjmp	.-212    	; 0x1752 <draw_string_box+0x13c>
		}
		current_line++;
	}
	
	
	epd_display_frame_part(Paint_GetImage(&paint), xStart, yStart, xStart+width, yStart+height, false);
    1826:	cf 84       	ldd	r12, Y+15	; 0x0f
    1828:	d8 88       	ldd	r13, Y+16	; 0x10
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	c8 0e       	add	r12, r24
    1830:	d9 1e       	adc	r13, r25
    1832:	ad 84       	ldd	r10, Y+13	; 0x0d
    1834:	be 84       	ldd	r11, Y+14	; 0x0e
    1836:	29 89       	ldd	r18, Y+17	; 0x11
    1838:	3a 89       	ldd	r19, Y+18	; 0x12
    183a:	a2 0e       	add	r10, r18
    183c:	b3 1e       	adc	r11, r19
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	0e 94 49 09 	call	0x1292	; 0x1292 <Paint_GetImage>
    1846:	e1 2c       	mov	r14, r1
    1848:	86 01       	movw	r16, r12
    184a:	95 01       	movw	r18, r10
    184c:	4b 89       	ldd	r20, Y+19	; 0x13
    184e:	5c 89       	ldd	r21, Y+20	; 0x14
    1850:	69 89       	ldd	r22, Y+17	; 0x11
    1852:	7a 89       	ldd	r23, Y+18	; 0x12
    1854:	0e 94 6e 07 	call	0xedc	; 0xedc <epd_display_frame_part>
	
	epd_turn_on_display();
    1858:	0e 94 3e 07 	call	0xe7c	; 0xe7c <epd_turn_on_display>
	
	epd_display_frame_part(Paint_GetImage(&paint), xStart, yStart, xStart+width, yStart+height, false);
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	0e 94 49 09 	call	0x1292	; 0x1292 <Paint_GetImage>
    1864:	95 01       	movw	r18, r10
    1866:	4b 89       	ldd	r20, Y+19	; 0x13
    1868:	5c 89       	ldd	r21, Y+20	; 0x14
    186a:	69 89       	ldd	r22, Y+17	; 0x11
    186c:	7a 89       	ldd	r23, Y+18	; 0x12
    186e:	0e 94 6e 07 	call	0xedc	; 0xedc <epd_display_frame_part>
	
//	free(image);
}
    1872:	4d 89       	ldd	r20, Y+21	; 0x15
    1874:	5e 89       	ldd	r21, Y+22	; 0x16
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	5e bf       	out	0x3e, r21	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	4d bf       	out	0x3d, r20	; 61
    1880:	66 96       	adiw	r28, 0x16	; 22
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	9f 90       	pop	r9
    18a2:	8f 90       	pop	r8
    18a4:	7f 90       	pop	r7
    18a6:	6f 90       	pop	r6
    18a8:	5f 90       	pop	r5
    18aa:	4f 90       	pop	r4
    18ac:	3f 90       	pop	r3
    18ae:	2f 90       	pop	r2
    18b0:	08 95       	ret

000018b2 <update_question_boxes>:
// 	interface->left_eye = left_eye;
}


void update_question_boxes(char *question1, char *question2, char *question3)
{
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ec 01       	movw	r28, r24
    18c2:	6b 01       	movw	r12, r22
	draw_string_box(200,0,80,160, question3, true);
    18c4:	ee 24       	eor	r14, r14
    18c6:	e3 94       	inc	r14
    18c8:	8a 01       	movw	r16, r20
    18ca:	20 ea       	ldi	r18, 0xA0	; 160
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e5       	ldi	r20, 0x50	; 80
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	88 ec       	ldi	r24, 0xC8	; 200
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 0b 0b 	call	0x1616	; 0x1616 <draw_string_box>
	draw_string_box(200,160,80,160, question2, true);
    18de:	86 01       	movw	r16, r12
    18e0:	20 ea       	ldi	r18, 0xA0	; 160
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e5       	ldi	r20, 0x50	; 80
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	60 ea       	ldi	r22, 0xA0	; 160
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <draw_string_box>
	draw_string_box(200,320,80,160, question1, true);
    18f4:	8e 01       	movw	r16, r28
    18f6:	20 ea       	ldi	r18, 0xA0	; 160
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e5       	ldi	r20, 0x50	; 80
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	60 e4       	ldi	r22, 0x40	; 64
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	88 ec       	ldi	r24, 0xC8	; 200
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 0b 0b 	call	0x1616	; 0x1616 <draw_string_box>
}
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ef 90       	pop	r14
    1914:	df 90       	pop	r13
    1916:	cf 90       	pop	r12
    1918:	08 95       	ret

0000191a <update_answer_box>:

void update_answer_box(char *answer)
{
    191a:	ef 92       	push	r14
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
	draw_string_box(144, 216, 32, 256, answer, false);
    1920:	e1 2c       	mov	r14, r1
    1922:	8c 01       	movw	r16, r24
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	31 e0       	ldi	r19, 0x01	; 1
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	68 ed       	ldi	r22, 0xD8	; 216
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 e9       	ldi	r24, 0x90	; 144
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 0b 0b 	call	0x1616	; 0x1616 <draw_string_box>
}
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ef 90       	pop	r14
    193e:	08 95       	ret

00001940 <main>:
#include "epdpaint.h"
#include "interface_driver.h"



int main(void) {
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	ca 5d       	subi	r28, 0xDA	; 218
    194a:	d1 09       	sbc	r29, r1
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61

	
	Interface interface;

	
	init_interface(&interface);
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <init_interface>
	
	char str1[] = "So where are you trying to go";
    195e:	8e e1       	ldi	r24, 0x1E	; 30
    1960:	e8 ed       	ldi	r30, 0xD8	; 216
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	de 01       	movw	r26, r28
    1966:	d3 96       	adiw	r26, 0x33	; 51
    1968:	01 90       	ld	r0, Z+
    196a:	0d 92       	st	X+, r0
    196c:	8a 95       	dec	r24
    196e:	e1 f7       	brne	.-8      	; 0x1968 <main+0x28>
	char str2[] = "How long have you been in austin for";
    1970:	85 e2       	ldi	r24, 0x25	; 37
    1972:	e6 ef       	ldi	r30, 0xF6	; 246
    1974:	f1 e0       	ldi	r31, 0x01	; 1
    1976:	de 01       	movw	r26, r28
    1978:	af 5a       	subi	r26, 0xAF	; 175
    197a:	bf 4f       	sbci	r27, 0xFF	; 255
    197c:	01 90       	ld	r0, Z+
    197e:	0d 92       	st	X+, r0
    1980:	8a 95       	dec	r24
    1982:	e1 f7       	brne	.-8      	; 0x197c <main+0x3c>
	char str3[] = "Nah i am not helping you. This doesn't make sense";
    1984:	82 e3       	ldi	r24, 0x32	; 50
    1986:	eb e1       	ldi	r30, 0x1B	; 27
    1988:	f2 e0       	ldi	r31, 0x02	; 2
    198a:	de 01       	movw	r26, r28
    198c:	aa 58       	subi	r26, 0x8A	; 138
    198e:	bf 4f       	sbci	r27, 0xFF	; 255
    1990:	01 90       	ld	r0, Z+
    1992:	0d 92       	st	X+, r0
    1994:	8a 95       	dec	r24
    1996:	e1 f7       	brne	.-8      	; 0x1990 <main+0x50>
	char stra[] = "A: update answer box. I need this line to overflow";
    1998:	83 e3       	ldi	r24, 0x33	; 51
    199a:	ed e4       	ldi	r30, 0x4D	; 77
    199c:	f2 e0       	ldi	r31, 0x02	; 2
    199e:	de 01       	movw	r26, r28
    19a0:	a8 55       	subi	r26, 0x58	; 88
    19a2:	bf 4f       	sbci	r27, 0xFF	; 255
    19a4:	01 90       	ld	r0, Z+
    19a6:	0d 92       	st	X+, r0
    19a8:	8a 95       	dec	r24
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <main+0x64>
	
	
	
	update_question_boxes(str1, str2, str3);
    19ac:	ae 01       	movw	r20, r28
    19ae:	4a 58       	subi	r20, 0x8A	; 138
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	be 01       	movw	r22, r28
    19b4:	6f 5a       	subi	r22, 0xAF	; 175
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	ce 01       	movw	r24, r28
    19ba:	c3 96       	adiw	r24, 0x33	; 51
    19bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <update_question_boxes>
	update_answer_box(stra);//Nah Fuck you lil bitch. Take me to austin");
    19c0:	ce 01       	movw	r24, r28
    19c2:	88 55       	subi	r24, 0x58	; 88
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	0e 94 8d 0c 	call	0x191a	; 0x191a <update_answer_box>

	update_question_boxes(str3, str1, str2);
    19ca:	ae 01       	movw	r20, r28
    19cc:	4f 5a       	subi	r20, 0xAF	; 175
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	be 01       	movw	r22, r28
    19d2:	6d 5c       	subi	r22, 0xCD	; 205
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	ce 01       	movw	r24, r28
    19d8:	8a 58       	subi	r24, 0x8A	; 138
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <update_question_boxes>
	
	epd_sleep();
    19e0:	0e 94 44 07 	call	0xe88	; 0xe88 <epd_sleep>
    19e4:	2f e3       	ldi	r18, 0x3F	; 63
    19e6:	38 ef       	ldi	r19, 0xF8	; 248
    19e8:	84 ee       	ldi	r24, 0xE4	; 228
    19ea:	9f e0       	ldi	r25, 0x0F	; 15
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	30 40       	sbci	r19, 0x00	; 0
    19f0:	80 40       	sbci	r24, 0x00	; 0
    19f2:	90 40       	sbci	r25, 0x00	; 0
    19f4:	d9 f7       	brne	.-10     	; 0x19ec <main+0xac>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <main+0xb8>
    19f8:	00 00       	nop
    19fa:	ff cf       	rjmp	.-2      	; 0x19fa <main+0xba>

000019fc <__divmodhi4>:
    19fc:	97 fb       	bst	r25, 7
    19fe:	07 2e       	mov	r0, r23
    1a00:	16 f4       	brtc	.+4      	; 0x1a06 <__divmodhi4+0xa>
    1a02:	00 94       	com	r0
    1a04:	07 d0       	rcall	.+14     	; 0x1a14 <__divmodhi4_neg1>
    1a06:	77 fd       	sbrc	r23, 7
    1a08:	09 d0       	rcall	.+18     	; 0x1a1c <__divmodhi4_neg2>
    1a0a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__udivmodhi4>
    1a0e:	07 fc       	sbrc	r0, 7
    1a10:	05 d0       	rcall	.+10     	; 0x1a1c <__divmodhi4_neg2>
    1a12:	3e f4       	brtc	.+14     	; 0x1a22 <__divmodhi4_exit>

00001a14 <__divmodhi4_neg1>:
    1a14:	90 95       	com	r25
    1a16:	81 95       	neg	r24
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__divmodhi4_neg2>:
    1a1c:	70 95       	com	r23
    1a1e:	61 95       	neg	r22
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255

00001a22 <__divmodhi4_exit>:
    1a22:	08 95       	ret

00001a24 <__udivmodhi4>:
    1a24:	aa 1b       	sub	r26, r26
    1a26:	bb 1b       	sub	r27, r27
    1a28:	51 e1       	ldi	r21, 0x11	; 17
    1a2a:	07 c0       	rjmp	.+14     	; 0x1a3a <__udivmodhi4_ep>

00001a2c <__udivmodhi4_loop>:
    1a2c:	aa 1f       	adc	r26, r26
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	a6 17       	cp	r26, r22
    1a32:	b7 07       	cpc	r27, r23
    1a34:	10 f0       	brcs	.+4      	; 0x1a3a <__udivmodhi4_ep>
    1a36:	a6 1b       	sub	r26, r22
    1a38:	b7 0b       	sbc	r27, r23

00001a3a <__udivmodhi4_ep>:
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	5a 95       	dec	r21
    1a40:	a9 f7       	brne	.-22     	; 0x1a2c <__udivmodhi4_loop>
    1a42:	80 95       	com	r24
    1a44:	90 95       	com	r25
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	08 95       	ret

00001a4c <strncpy>:
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	dc 01       	movw	r26, r24
    1a50:	41 50       	subi	r20, 0x01	; 1
    1a52:	50 40       	sbci	r21, 0x00	; 0
    1a54:	48 f0       	brcs	.+18     	; 0x1a68 <strncpy+0x1c>
    1a56:	01 90       	ld	r0, Z+
    1a58:	0d 92       	st	X+, r0
    1a5a:	00 20       	and	r0, r0
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <strncpy+0x4>
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <strncpy+0x16>
    1a60:	1d 92       	st	X+, r1
    1a62:	41 50       	subi	r20, 0x01	; 1
    1a64:	50 40       	sbci	r21, 0x00	; 0
    1a66:	e0 f7       	brcc	.-8      	; 0x1a60 <strncpy+0x14>
    1a68:	08 95       	ret

00001a6a <_exit>:
    1a6a:	f8 94       	cli

00001a6c <__stop_program>:
    1a6c:	ff cf       	rjmp	.-2      	; 0x1a6c <__stop_program>
